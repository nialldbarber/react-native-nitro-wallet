///
/// JHybridNitroWalletSpec.cpp
/// This file was generated by nitrogen. DO NOT MODIFY THIS FILE.
/// https://github.com/mrousavy/nitro
/// Copyright Â© 2025 Marc Rousavy @ Margelo
///

#include "JHybridNitroWalletSpec.hpp"



#include <NitroModules/Promise.hpp>
#include <NitroModules/JPromise.hpp>
#include <string>
#include <optional>

namespace margelo::nitro::nitrowallet {

  jni::local_ref<JHybridNitroWalletSpec::jhybriddata> JHybridNitroWalletSpec::initHybrid(jni::alias_ref<jhybridobject> jThis) {
    return makeCxxInstance(jThis);
  }

  void JHybridNitroWalletSpec::registerNatives() {
    registerHybrid({
      makeNativeMethod("initHybrid", JHybridNitroWalletSpec::initHybrid),
    });
  }

  size_t JHybridNitroWalletSpec::getExternalMemorySize() noexcept {
    static const auto method = javaClassStatic()->getMethod<jlong()>("getMemorySize");
    return method(_javaPart);
  }

  // Properties
  

  // Methods
  std::shared_ptr<Promise<bool>> JHybridNitroWalletSpec::canAddPassesToAppleWallet() {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>()>("canAddPassesToAppleWallet");
    auto __result = method(_javaPart);
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<bool>> JHybridNitroWalletSpec::addPassToAppleWallet(const std::string& base64String) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* base64String */)>("addPassToAppleWallet");
    auto __result = method(_javaPart, jni::make_jstring(base64String));
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridNitroWalletSpec::viewPassInAppleWallet(const std::string& cardIdentifier, const std::optional<std::string>& serialNumber) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* cardIdentifier */, jni::alias_ref<jni::JString> /* serialNumber */)>("viewPassInAppleWallet");
    auto __result = method(_javaPart, jni::make_jstring(cardIdentifier), serialNumber.has_value() ? jni::make_jstring(serialNumber.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<bool>> JHybridNitroWalletSpec::doesPassExistInAppleWallet(const std::string& cardIdentifier, const std::optional<std::string>& serialNumber) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* cardIdentifier */, jni::alias_ref<jni::JString> /* serialNumber */)>("doesPassExistInAppleWallet");
    auto __result = method(_javaPart, jni::make_jstring(cardIdentifier), serialNumber.has_value() ? jni::make_jstring(serialNumber.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<bool>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& __boxedResult) {
        auto __result = jni::static_ref_cast<jni::JBoolean>(__boxedResult);
        __promise->resolve(static_cast<bool>(__result->value()));
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }
  std::shared_ptr<Promise<void>> JHybridNitroWalletSpec::removePassFromAppleWallet(const std::string& cardIdentifier, const std::optional<std::string>& serialNumber) {
    static const auto method = javaClassStatic()->getMethod<jni::local_ref<JPromise::javaobject>(jni::alias_ref<jni::JString> /* cardIdentifier */, jni::alias_ref<jni::JString> /* serialNumber */)>("removePassFromAppleWallet");
    auto __result = method(_javaPart, jni::make_jstring(cardIdentifier), serialNumber.has_value() ? jni::make_jstring(serialNumber.value()) : nullptr);
    return [&]() {
      auto __promise = Promise<void>::create();
      __result->cthis()->addOnResolvedListener([=](const jni::alias_ref<jni::JObject>& /* unit */) {
        __promise->resolve();
      });
      __result->cthis()->addOnRejectedListener([=](const jni::alias_ref<jni::JThrowable>& __throwable) {
        jni::JniException __jniError(__throwable);
        __promise->reject(std::make_exception_ptr(__jniError));
      });
      return __promise;
    }();
  }

} // namespace margelo::nitro::nitrowallet
